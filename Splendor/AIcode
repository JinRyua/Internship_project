5/21 ì²« ai
double score = (gameState.ai_score * 10)+ gameState.ai_coin.white + gameState.ai_coin.green + gameState.ai_coin.black
            + gameState.ai_coin.red + gameState.ai_coin.blue;
        score -= (gameState.player_score * 10)+ gameState.player_coin.white + gameState.player_coin.green + gameState.player_coin.black
            + gameState.player_coin.red + gameState.player_coin.blue;

        score = score/3;
        custom_msgs::coin& coin_vector = find_coin_vector("ai1", gameState);
        vector<vector<custom_msgs::card>>& card_vector = find_card_vector("ai1", gameState);
        for(int i =0;i<5;i++){
            score += card_vector[i].size()*10;
        }

        for(int i = 0 ; i < 3; i++){
            vector<custom_msgs::card>& level_vector = select_vector(get_level_from_int(i), gameState.level1_open, gameState.level2_open,
                                                                gameState.level3_open, gameState.nobility_open);
            for(int j = 0; j < level_vector.size(); j++){
                vector<int> sc;
                sc.resize(5, 0);
                int need_token = 0;
                int sum = 0;
                for(int k = 0; k<5;k++){
                    sum += select_color(level_vector[j], get_color_from_int(k));
                    int temp = select_color(level_vector[j], get_color_from_int(k)) - select_coin(k, coin_vector)
                                - (card_vector[k].size());
                    if(temp < 0)
                        temp = 0;
                    
                    sc[k] = temp;
                    need_token += temp;
                }
                double probabilty = 0;
                for(int k = 0; k<5;k++){
                    if(sc[k]>select_coin(k, gameState.field_coin)){
                        probabilty = 0;
                        break;
                    }
                    if(k == 4){
                        probabilty = (double)(sum-need_token) / sum;
                    }
                }
                
                
                score += ((double)(gameState.card_expected_value[level_vector[j].name]) * probabilty);
                //cout<<((double)(gameState.card_expected_value[level_vector[j].name]) * probabilty)*3<<" "<<probabilty<<endl;
            }
        }
        //cout<<score<<endl;
        return score; 



