// Generated by gencpp from file occupancy_grid_utils/NavigationFunction.msg
// DO NOT EDIT!


#ifndef OCCUPANCY_GRID_UTILS_MESSAGE_NAVIGATIONFUNCTION_H
#define OCCUPANCY_GRID_UTILS_MESSAGE_NAVIGATIONFUNCTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/MapMetaData.h>

namespace occupancy_grid_utils
{
template <class ContainerAllocator>
struct NavigationFunction_
{
  typedef NavigationFunction_<ContainerAllocator> Type;

  NavigationFunction_()
    : info()
    , source(0)
    , valid()
    , back_pointers()
    , potential()  {
    }
  NavigationFunction_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , source(0)
    , valid(_alloc)
    , back_pointers(_alloc)
    , potential(_alloc)  {
  (void)_alloc;
    }



   typedef  ::nav_msgs::MapMetaData_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef uint32_t _source_type;
  _source_type source;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _valid_type;
  _valid_type valid;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _back_pointers_type;
  _back_pointers_type back_pointers;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _potential_type;
  _potential_type potential;





  typedef boost::shared_ptr< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationFunction_

typedef ::occupancy_grid_utils::NavigationFunction_<std::allocator<void> > NavigationFunction;

typedef boost::shared_ptr< ::occupancy_grid_utils::NavigationFunction > NavigationFunctionPtr;
typedef boost::shared_ptr< ::occupancy_grid_utils::NavigationFunction const> NavigationFunctionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator1> & lhs, const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.source == rhs.source &&
    lhs.valid == rhs.valid &&
    lhs.back_pointers == rhs.back_pointers &&
    lhs.potential == rhs.potential;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator1> & lhs, const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace occupancy_grid_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c75461ff4f50ec30d6191b0a4430e7ee";
  }

  static const char* value(const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc75461ff4f50ec30ULL;
  static const uint64_t static_value2 = 0xd6191b0a4430e7eeULL;
};

template<class ContainerAllocator>
struct DataType< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "occupancy_grid_utils/NavigationFunction";
  }

  static const char* value(const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_msgs/MapMetaData info\n"
"uint32 source\n"
"bool[] valid\n"
"uint32[] back_pointers\n"
"float32[] potential\n"
"================================================================================\n"
"MSG: nav_msgs/MapMetaData\n"
"# This hold basic information about the characterists of the OccupancyGrid\n"
"\n"
"# The time at which the map was loaded\n"
"time map_load_time\n"
"# The map resolution [m/cell]\n"
"float32 resolution\n"
"# Map width [cells]\n"
"uint32 width\n"
"# Map height [cells]\n"
"uint32 height\n"
"# The origin of the map [m, m, rad].  This is the real-world pose of the\n"
"# cell (0,0) in the map.\n"
"geometry_msgs/Pose origin\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.source);
      stream.next(m.valid);
      stream.next(m.back_pointers);
      stream.next(m.potential);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationFunction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::occupancy_grid_utils::NavigationFunction_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::nav_msgs::MapMetaData_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "source: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.source);
    s << indent << "valid[]" << std::endl;
    for (size_t i = 0; i < v.valid.size(); ++i)
    {
      s << indent << "  valid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.valid[i]);
    }
    s << indent << "back_pointers[]" << std::endl;
    for (size_t i = 0; i < v.back_pointers.size(); ++i)
    {
      s << indent << "  back_pointers[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.back_pointers[i]);
    }
    s << indent << "potential[]" << std::endl;
    for (size_t i = 0; i < v.potential.size(); ++i)
    {
      s << indent << "  potential[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.potential[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCCUPANCY_GRID_UTILS_MESSAGE_NAVIGATIONFUNCTION_H
