// Generated by gencpp from file rosplan_knowledge_msgs/GetDomainPredicateDetailsServiceResponse.msg
// DO NOT EDIT!


#ifndef ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_GETDOMAINPREDICATEDETAILSSERVICERESPONSE_H
#define ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_GETDOMAINPREDICATEDETAILSSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rosplan_knowledge_msgs/DomainFormula.h>

namespace rosplan_knowledge_msgs
{
template <class ContainerAllocator>
struct GetDomainPredicateDetailsServiceResponse_
{
  typedef GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> Type;

  GetDomainPredicateDetailsServiceResponse_()
    : predicate()  {
    }
  GetDomainPredicateDetailsServiceResponse_(const ContainerAllocator& _alloc)
    : predicate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::rosplan_knowledge_msgs::DomainFormula_<ContainerAllocator>  _predicate_type;
  _predicate_type predicate;





  typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDomainPredicateDetailsServiceResponse_

typedef ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<std::allocator<void> > GetDomainPredicateDetailsServiceResponse;

typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse > GetDomainPredicateDetailsServiceResponsePtr;
typedef boost::shared_ptr< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse const> GetDomainPredicateDetailsServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator1> & lhs, const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.predicate == rhs.predicate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator1> & lhs, const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosplan_knowledge_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5738f6a32f5daabd19d758e1a2070d2";
  }

  static const char* value(const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5738f6a32f5daabULL;
  static const uint64_t static_value2 = 0xd19d758e1a2070d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_knowledge_msgs/GetDomainPredicateDetailsServiceResponse";
  }

  static const char* value(const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_knowledge_msgs/DomainFormula predicate\n"
"\n"
"\n"
"================================================================================\n"
"MSG: rosplan_knowledge_msgs/DomainFormula\n"
"# A message used to represent an atomic formula from the domain.\n"
"# typed_parameters matches label -> type\n"
"string name\n"
"diagnostic_msgs/KeyValue[] typed_parameters\n"
"\n"
"================================================================================\n"
"MSG: diagnostic_msgs/KeyValue\n"
"string key # what to label this value when viewing\n"
"string value # a value to track over time\n"
;
  }

  static const char* value(const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.predicate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDomainPredicateDetailsServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_knowledge_msgs::GetDomainPredicateDetailsServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "predicate: ";
    s << std::endl;
    Printer< ::rosplan_knowledge_msgs::DomainFormula_<ContainerAllocator> >::stream(s, indent + "  ", v.predicate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_GETDOMAINPREDICATEDETAILSSERVICERESPONSE_H
